const express = require('express');
const router = express.Router();
const { WebhookClient, Card } = require('dialogflow-fulfillment');
const phone = require('../Model/phone');
const Fuse = require('fuse.js');
const diacritics = require('diacritics');
const axios = require('axios');
const { text } = require('body-parser');

const GEMINI_API_KEY = "AIzaSyBKXbXubb9N6Evd3WkDW8WNvmnact7ExRA";
const url = `https://generativelanguage.googleapis.com/v1/models/gemini-1.5-flash:generateContent?key=${GEMINI_API_KEY}`;

// üîç Chu·∫©n h√≥a vƒÉn b·∫£n
function normalizeText(text) {
    return diacritics.remove(text.toLowerCase().trim());
}

// üöÄ G·ªçi API Gemini ƒë·ªÉ tr·∫£ l·ªùi c√¢u h·ªèi AI
async function callGeminiAPI(query) {
    try {
        const response = await axios.post(
            url,
            { contents: [{ parts: [{ text: query }] }] },
            { headers: { 'Content-Type': 'application/json' } }
        );

        return response.data.candidates?.[0]?.content?.parts?.[0]?.text || "Xin l·ªói, t√¥i ch∆∞a t√¨m th·∫•y th√¥ng tin b·∫°n c·∫ßn.";
    } catch (error) {
        console.error("L·ªói khi g·ªçi Gemini API:", error.message);
        return "Xin l·ªói, c√≥ l·ªói khi x·ª≠ l√Ω y√™u c·∫ßu c·ªßa b·∫°n.";
    }
}

router.post('/webhook', async (req, res) => {
    const agent = new WebhookClient({ request: req, response: res });

    async function findProduct(agent) {
        const userQuery = req.body.queryResult.parameters['any'] || req.body.queryResult.queryText;
        console.log("üîç [findProduct] User Query:", userQuery);
    
        if (!userQuery) {
            agent.add("B·∫°n c√≥ th·ªÉ n√≥i r√µ h∆°n v·ªÅ s·∫£n ph·∫©m b·∫°n mu·ªën t√¨m kh√¥ng?");
            return;
        }
    
        const normalizedQuery = normalizeText(userQuery);
        const allProducts = await phone.find();
        console.log("üì¶ [findProduct] Total products fetched:", allProducts.length);
    
        // üîç Chu·∫©n h√≥a d·ªØ li·ªáu s·∫£n ph·∫©m
        const normalizedProducts = allProducts.map(product => ({
            ...product._doc,
            normalized_name: normalizeText(product.name),
            minPrice: Math.min(
                ...product.image.flatMap(color => color.memory.map(mem => mem.price || Infinity))
            ),
            detailUrl: `https://tttn-pn1v.onrender.com/product/${product._id}`
        }));
    
    
        // üîé T√¨m ki·∫øm s·∫£n ph·∫©m g·∫ßn ƒë√∫ng nh·∫•t
        const fuse = new Fuse(normalizedProducts, { keys: ['normalized_name'], threshold: 0.15 });
        const result = fuse.search(normalizedQuery);
        console.log("üîç [findProduct] Fuse.js search result:", result);
    
        const bestMatch = result.length > 0 ? result[0].item : null;
    
        if (bestMatch) {
            console.log("‚úÖ [findProduct] Found:", bestMatch.name);
            agent.add(new Card({
                title: `üì± ${bestMatch.name}`,
                imageUrl: bestMatch.image[0]?.imageUrl || "https://yourwebsite.com/default-image.jpg",
                text: `üí∞ Gi√°: ${bestMatch.minPrice.toLocaleString()} VND`,
                buttonText: "üîó Xem chi ti·∫øt",
                buttonUrl: bestMatch.detailUrl
            }));
            return;
        }
    
        try {
            const geminiResponse = await callGeminiAPI(
                `N·∫øu ng∆∞·ªùi d√πng y√™u c·∫ßu t∆∞ v·∫•n v·ªÅ ƒëi·ªán tho·∫°i, h√£y cung c·∫•p th√¥ng tin ng·∫Øn g·ªçn v·ªÅ m·∫´u ƒëi·ªán tho·∫°i ƒë√≥.
                N·∫øu ng∆∞·ªùi d√πng mu·ªën t√¨m s·∫£n ph·∫©m, h√£y t√¨m trong danh s√°ch s·∫£n ph·∫©m m√† t√¥i ƒë√£ cung c·∫•p v√† g·ª≠i k√®m ƒë∆∞·ªùng link sau:
                https://tttn-pn1v.onrender.com/product/'id'. 
                N·∫øu kh√¥ng thu·ªôc hai tr∆∞·ªùng h·ª£p tr√™n, h√£y tr·∫£ l·ªùi b·∫±ng th√¥ng tin ng·∫Øn g·ªçn v·ªÅ ƒëi·ªán tho·∫°i v√† th√¥ng b√°o r·∫±ng kh√¥ng c√≥ s·∫£n ph·∫©m ph√π h·ª£p.
              
                D∆∞·ªõi ƒë√¢y l√† danh s√°ch c√°c ƒëi·ªán tho·∫°i hi·ªán c√≥:
                ${normalizedProducts.map(p => `- **${p.name}**, ID = ${p._id}, Gi√°: ${p.minPrice.toLocaleString()} VND`).join("\n")}
              
                ƒê√¢y l√† c√¢u h·ªèi c·ªßa ng∆∞·ªùi d√πng: ${userQuery}
                H√£y t∆∞ v·∫•n cho h·ªç!`
              );
              
            agent.add(geminiResponse);

        } catch (error) {
            console.error("‚ùå [findProduct] Error calling Gemini AI:", error);
            agent.add("C√≥ l·ªói x·∫£y ra khi l·∫•y th√¥ng tin t·ª´ Gemini AI, vui l√≤ng th·ª≠ l·∫°i.");
        }
        
    }
    

    async function fallback(agent) {
        console.log("üî• [fallback] Default Fallback Intent triggered!");

        const userQuery = req.body.queryResult.queryText;
        console.log("üîç [fallback] User Query:", userQuery);

        if (!userQuery) {
            agent.add("Xin l·ªói, t√¥i ch∆∞a hi·ªÉu r√µ. B·∫°n c√≥ th·ªÉ th·ª≠ l·∫°i v·ªõi c√¢u kh√°c kh√¥ng?");
            return;
        }

        console.log("ü§ñ [fallback] Sending request to Gemini AI...");
        const geminiResponse = await callGeminiAPI(`tr·∫£ l·ªùi ng·∫Øn g·ªçn v·ªÅ c√¢u h·ªèi n√†y cho ng∆∞·ªùi d√πng : ${userQuery} `);
        agent.add(geminiResponse);
    }

    let intentMap = new Map();
    intentMap.set('FindProduct', findProduct);
    intentMap.set('Default Fallback Intent', fallback);

    try {
        agent.handleRequest(intentMap);
    } catch (error) {
        console.error('üö® [ERROR] L·ªói khi x·ª≠ l√Ω intent:', error.message);
        res.status(500).send('L·ªói khi x·ª≠ l√Ω y√™u c·∫ßu');
    }
});


module.exports = router;
